import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { ThemeProvider } from '@mui/material/styles';
import { createTheme } from '@mui/material/styles';
import ContentList from '../components/v2/ContentList';
import { CreatorChat } from '../components/Chat/CreatorChat';

// MUI„ÉÜ„Éº„Éû
const theme = createTheme();

// PromptArea„ÅÆ„É¢„ÉÉ„ÇØÔºàstyled-components„Åå„ÉÜ„Çπ„ÉàÁí∞Â¢É„ÅßÂïèÈ°å„ÇíËµ∑„Åì„Åô„Åü„ÇÅÔºâ
jest.mock('../components/v2/PromptArea', () => {
  return function MockPromptArea() {
    return (
      <div data-testid="prompt-area">
        <button data-testid="generate-button">Generate</button>
        <textarea data-testid="prompt-input" placeholder="Describe your content..." />
      </div>
    );
  };
});

// PiAPI„Çµ„Éº„Éì„Çπ„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('../services/piapi.service', () => ({
  piApiService: {
    generate: jest.fn().mockResolvedValue({
      id: 'test-id',
      status: 'completed',
      result: { url: 'https://example.com/test.jpg' }
    }),
    waitForCompletion: jest.fn().mockResolvedValue({
      id: 'test-id',
      status: 'completed',
      result: { url: 'https://example.com/test.jpg' }
    })
  }
}));

const renderWithTheme = (component: React.ReactElement) => {
  return render(
    <ThemeProvider theme={theme}>
      {component}
    </ThemeProvider>
  );
};

describe('ContentList Component', () => {
  it('renders creator profile header', () => {
    renderWithTheme(<ContentList />);
    
    expect(screen.getByText('ËÑ≥„Åø„Åù„ÅÆÊã°Âºµ - AI Creative Studio')).toBeInTheDocument();
    expect(screen.getByText('„ÅÇ„Çâ„ÇÜ„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÁîü„ÅøÂá∫„Åô„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†')).toBeInTheDocument();
  });

  it('displays sample content cards', () => {
    renderWithTheme(<ContentList />);
    
    expect(screen.getByText('„Çµ„Ç§„Éê„Éº„Éë„É≥„ÇØÈÉΩÂ∏Ç')).toBeInTheDocument();
    expect(screen.getByText('„Éâ„É™„Éº„É†„Ç∑„Éç„Éû')).toBeInTheDocument();
    expect(screen.getByText('„Ç®„Éî„ÉÉ„ÇØ BGM')).toBeInTheDocument();
  });

  it('shows creator information for each content', () => {
    renderWithTheme(<ContentList />);
    
    expect(screen.getByText('AI Creator')).toBeInTheDocument();
    expect(screen.getByText('Visual Artist')).toBeInTheDocument();
    expect(screen.getByText('Music AI')).toBeInTheDocument();
  });

  it('handles follow button clicks', () => {
    renderWithTheme(<ContentList />);
    
    const followButtons = screen.getAllByText(/„Éï„Ç©„É≠„Éº/);
    expect(followButtons.length).toBeGreaterThan(0);
    
    // „ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Éï„Ç©„É≠„ÉºÁä∂ÊÖã„ÅåÂ§â„Çè„Çã„Åì„Å®„Çí„ÉÜ„Çπ„Éà
    fireEvent.click(followButtons[0]);
    // Áä∂ÊÖãÂ§âÊõ¥„ÅÆ„ÉÜ„Çπ„Éà„ÅØÂÆüË£Ö„Å´„Çà„Å£„Å¶Áï∞„Å™„Çã„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß„ÅØ„ÇØ„É™„ÉÉ„ÇØ„ÅåÂèØËÉΩ„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
  });

  it('shows content type chips', () => {
    renderWithTheme(<ContentList />);
    
    expect(screen.getByText('üñºÔ∏è IMAGE')).toBeInTheDocument();
    expect(screen.getByText('üé¨ VIDEO')).toBeInTheDocument();
    expect(screen.getByText('üéµ MUSIC')).toBeInTheDocument();
  });

  it('handles like button interactions', () => {
    renderWithTheme(<ContentList />);
    
    const likeButtons = screen.getAllByLabelText(/favorite/i);
    expect(likeButtons.length).toBeGreaterThan(0);
    
    // „ÅÑ„ÅÑ„Å≠„Éú„Çø„É≥„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„ÉÜ„Çπ„Éà
    fireEvent.click(likeButtons[0]);
  });
});

describe('CreatorChat Component', () => {
  it('renders creator list', () => {
    renderWithTheme(<CreatorChat />);
    
    expect(screen.getByText('üß† „ÇØ„É™„Ç®„Ç§„Çø„Éº')).toBeInTheDocument();
    expect(screen.getByText('AI Artist Pro')).toBeInTheDocument();
    expect(screen.getByText('Music AI Creator')).toBeInTheDocument();
    expect(screen.getByText('Video Wizard')).toBeInTheDocument();
  });

  it('shows follower counts', () => {
    renderWithTheme(<CreatorChat />);
    
    expect(screen.getByText('1250 „Éï„Ç©„É≠„ÉØ„Éº')).toBeInTheDocument();
    expect(screen.getByText('890 „Éï„Ç©„É≠„ÉØ„Éº')).toBeInTheDocument();
    expect(screen.getByText('2100 „Éï„Ç©„É≠„ÉØ„Éº')).toBeInTheDocument();
  });

  it('displays specialty chips for creators', () => {
    renderWithTheme(<CreatorChat />);
    
    expect(screen.getByText('ÁîªÂÉèÁîüÊàê')).toBeInTheDocument();
    expect(screen.getByText('ÂãïÁîªÁ∑®ÈõÜ')).toBeInTheDocument();
    expect(screen.getByText('Èü≥Ê•ΩÁîüÊàê')).toBeInTheDocument();
  });

  it('shows online status indicators', () => {
    renderWithTheme(<CreatorChat />);
    
    // „Ç™„É≥„É©„Ç§„É≥Áä∂ÊÖã„ÅÆ„Éê„ÉÉ„Ç∏„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÜ„Çπ„Éà
    const badges = document.querySelectorAll('.MuiBadge-badge');
    expect(badges.length).toBeGreaterThan(0);
  });

  it('handles message input', () => {
    renderWithTheme(<CreatorChat />);
    
    const messageInput = screen.getByPlaceholderText('„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ...');
    expect(messageInput).toBeInTheDocument();
    
    fireEvent.change(messageInput, { target: { value: '„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏' } });
    expect(messageInput).toHaveValue('„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏');
  });

  it('displays existing chat messages', () => {
    renderWithTheme(<CreatorChat />);
    
    expect(screen.getByText(/Êñ∞„Åó„ÅÑAIÁîªÂÉèÁîüÊàê„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´„Å§„ÅÑ„Å¶Áõ∏Ë´á„Åå„ÅÇ„Çä„Åæ„Åô/)).toBeInTheDocument();
    expect(screen.getByText(/„Å©„ÅÆ„Çà„ÅÜ„Å™„Çπ„Çø„Ç§„É´„ÅÆÁîªÂÉè„ÇíÁîüÊàê„Åó„Åü„ÅÑ„Åß„Åô„Åã/)).toBeInTheDocument();
  });

  it('handles follow/unfollow actions', () => {
    renderWithTheme(<CreatorChat />);
    
    // „Éï„Ç©„É≠„Éº„Éú„Çø„É≥„ÇíÊé¢„Åó„Å¶„ÇØ„É™„ÉÉ„ÇØ
    const followButtons = screen.getAllByLabelText(/person/i);
    expect(followButtons.length).toBeGreaterThan(0);
    
    fireEvent.click(followButtons[0]);
  });

  it('shows message timestamps', () => {
    renderWithTheme(<CreatorChat />);
    
    // „Çø„Ç§„É†„Çπ„Çø„É≥„Éó„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÜ„Çπ„ÉàÔºàÊ≠£Á¢∫„Å™ÊôÇÂàª„ÅØÂ§âÂãï„Åô„Çã„Åü„ÇÅ„ÄÅ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Çí„ÉÜ„Çπ„ÉàÔºâ
    const timeElements = document.querySelectorAll('[style*="opacity: 0.7"]');
    expect(timeElements.length).toBeGreaterThan(0);
  });
});

describe('Integration Tests', () => {
  it('content list and chat work together', async () => {
    renderWithTheme(
      <div>
        <ContentList />
        <CreatorChat />
      </div>
    );
    
    // ‰∏°Êñπ„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåÊ≠£Â∏∏„Å´„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(screen.getByText('ËÑ≥„Åø„Åù„ÅÆÊã°Âºµ - AI Creative Studio')).toBeInTheDocument();
    expect(screen.getByText('üß† „ÇØ„É™„Ç®„Ç§„Çø„Éº')).toBeInTheDocument();
  });

  it('handles responsive design elements', () => {
    renderWithTheme(<ContentList />);
    
    // „Ç∞„É™„ÉÉ„Éâ„É¨„Ç§„Ç¢„Ç¶„Éà„ÅåÈÅ©Áî®„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÜ„Çπ„Éà
    const gridContainer = document.querySelector('.MuiGrid-container');
    expect(gridContainer).toBeInTheDocument();
  });
});

describe('Error Handling', () => {
  it('handles missing props gracefully', () => {
    // „Ç®„É©„Éº„ÇíÁô∫Áîü„Åï„Åõ„Åö„Å´„É¨„É≥„ÉÄ„É™„É≥„Ç∞„Åß„Åç„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    expect(() => {
      renderWithTheme(<ContentList />);
    }).not.toThrow();
    
    expect(() => {
      renderWithTheme(<CreatorChat />);
    }).not.toThrow();
  });
});

describe('Accessibility', () => {
  it('has proper aria labels', () => {
    renderWithTheme(<ContentList />);
    
    // „Éú„Çø„É≥„Å´„Ç¢„ÇØ„Çª„Ç∑„Éñ„É´„Å™„É©„Éô„É´„Åå„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
    const buttons = screen.getAllByRole('button');
    expect(buttons.length).toBeGreaterThan(0);
  });

  it('supports keyboard navigation', () => {
    renderWithTheme(<CreatorChat />);
    
    const messageInput = screen.getByPlaceholderText('„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ...');
    
    // Enter„Ç≠„Éº„Åß„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°„Çí„ÉÜ„Çπ„Éà
    fireEvent.keyPress(messageInput, { key: 'Enter', code: 'Enter' });
  });
}); 